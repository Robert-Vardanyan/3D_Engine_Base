import math
import numpy as np


'''
    1) Projection
- Этот класс предназначен для создания матрицы проекции, которая преобразует 3D координаты объекта в 2D координаты экрана, чтобы объект можно было корректно отображать на экране.
- self.projection_matrix: Матрица проекции, используемая для отображения сцены с учетом параметров камеры (углы обзора, расстояние до ближней и дальней плоскостей).
- self.to_screen_matrix: Матрица для преобразования координат после проекции в координаты экрана. Она учитывает размеры экрана и масштабирует изображение так, чтобы оно отображалось правильно на экране.
    

    2)Параметры проекции
- NEAR и FAR: Это расстояния до ближней и дальней плоскостей отсечения камеры. Они определяют, какая часть сцены будет видна.
- RIGHT, LEFT, TOP, BOTTOM: Это границы видимости на ближней плоскости камеры, определяемые на основе углов обзора камеры (h_fov и v_fov).
    

    3)Преобразования
- m00, m11, m22, m32: Эти коэффициенты используются для построения матрицы проекции, которая управляет тем, как сцена будет проецироваться на плоскость экрана.
- self.to_screen_matrix: Эта матрица используется для перевода проецированных координат из пространства видимости в координаты пикселей экрана, с учетом размеров экрана и его ориентации.
'''


class Projection:
    # Конструктор класса Projection для создания матрицы проекции
    def __init__(self, render) :

        # Извлекаем параметры ближней и дальней плоскостей от отсечения камеры
        NEAR = render.camera.near_plane
        FAR = render.camera.far_plane
        # Вычисляем правую и левую границы на основе горизонтального угла обзора камеры
        RIGHT = math.tan(render.camera.h_fov / 2)
        LEFT = -RIGHT
        # Вычисляем верхнюю и нижнюю границы на основе вертикального угла обзора камеры
        TOP = math.tan(render.camera.v_fov / 2)
        BOTTOM = -TOP

        # Определяем элементы матрицы проекции для ортографического отображения
        m00 = 2 / (RIGHT - LEFT)
        m11 = 2 / (TOP - BOTTOM)
        m22 = (FAR + NEAR) / (FAR - NEAR)
        m32 = -2 * NEAR * FAR / (FAR - NEAR)
        
        # Создаем матрицу проекции
        self.projection_matrix = np.array([
            [m00,0,0,0],
            [0,m11,0,0],
            [0,0,m22,1],
            [0,0,m32,0]
        ])

        # Вычисляем матрицу преобразования в координаты экрана
        HW, HH = render.H_WIDTH, render.H_HEIGHT    # Половина ширины и высоты экрана
        self.to_screen_matrix = np.array([
            [HW,0,0,0],
            [0,-HH,0,0],
            [0,0,1,0],
            [HW,HH,0,1]
        ])